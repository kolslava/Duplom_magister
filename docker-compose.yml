# docker-compose.yml
services:
  nginx:
    image: nginx:1.25-alpine
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - "${FORWARD_NGINX_PORT}:80"
    volumes:
      - ./WebUI:/var/www/html
      - ./Components/Nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - app-network

  php:
    build:
      context: ./Components/PHP
    container_name: ${PROJECT_NAME}_php
    volumes:
      - ./WebUI:/var/www/html
      - ./Components/PHP/setup-laravel.php:/usr/local/bin/setup-laravel.php
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${MYSQL_DATABASE}
      - DB_USERNAME=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: ${PROJECT_NAME}_mysql
    restart: unless-stopped
    ports:
      - "${FORWARD_MYSQL_PORT}:3306"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./Components/MySQL/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME}_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${FORWARD_REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  fleet:
    image: fleetdm/fleet:latest
    container_name: ${PROJECT_NAME}_fleet
    restart: unless-stopped
    ports:
      - "${FORWARD_FLEET_UI_PORT}:8080"
      - "8412:8412"
    working_dir: /tmp
    command: >
      sh -c "
        mkdir -p ./tools/osquery &&
        cp /etc/fleet/certs/server.crt ./tools/osquery/fleet.crt &&
        cp /etc/fleet/certs/server.key ./tools/osquery/fleet.key &&
        fleet serve --config /etc/fleet/fleet.yml
      "
    volumes:
      - ./Components/FleetDM/Config/fleet.yml:/etc/fleet/fleet.yml
      - ./Components/FleetDM/Certificates:/etc/fleet/certs
    extra_hosts:
      - "${FLEET_SERVER_HOSTNAME}:host-gateway"
    environment:
      - FLEET_SERVER_URL=https://${FLEET_SERVER_HOSTNAME}:${FORWARD_FLEET_UI_PORT}
      - FLEET_MYSQL_ADDRESS=mysql:3306
      - FLEET_MYSQL_DATABASE=fleetdm
      - FLEET_MYSQL_USERNAME=${MYSQL_USER}
      - FLEET_MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - FLEET_REDIS_ADDRESS=redis:6379
      - FLEET_REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-k", "https://localhost:8080/api/v1/fleet/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  fleet-prepare-db:
    image: fleetdm/fleet:latest
    container_name: ${PROJECT_NAME}_fleet_prepare_db
    command: fleet prepare db --config /etc/fleet/fleet.yml
    volumes:
      - ./Components/FleetDM/Config/fleet.yml:/etc/fleet/fleet.yml
    environment:
      - FLEET_MYSQL_ADDRESS=mysql:3306
      - FLEET_MYSQL_DATABASE=fleetdm
      - FLEET_MYSQL_USERNAME=${MYSQL_USER}
      - FLEET_MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - FLEET_REDIS_ADDRESS=redis:6379
      - FLEET_REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  suricata:
    image: jasonish/suricata:latest
    container_name: ${PROJECT_NAME}_suricata
    restart: unless-stopped
    cap_add: [NET_ADMIN, NET_RAW, SYS_NICE]
    network_mode: service:nginx
    command: suricata -c /etc/suricata/suricata.yaml -i eth0
    volumes:
      - ./Components/Suricata/config/suricata.yaml:/etc/suricata/suricata.yaml
      # ## ЗМІНА ТУТ: Використовуємо іменований том для логів ##
      - suricata-logs:/var/log/suricata
      - ./Components/Suricata/rules:/etc/suricata/rules
    depends_on:
      - nginx

  orchestrator:
    build:
      context: ./Program
    container_name: ${PROJECT_NAME}_orchestrator
    restart: unless-stopped
    volumes:
      - suricata-logs:/var/log/suricata
      - ./Components/FleetDM/Certificates/server.crt:/etc/ssl/certs/fleet_server.crt:ro
    depends_on:
      - fleet
      - nginx
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  mysql-data:
  suricata-logs: